O conjunto de instruções será responsável por realizar operações básicas como soma, subtração, carga de dados, etc., usando os modos de endereçamento que implementamos anteriormente.

Conjunto de Instruções a Implementar:
    1.ADD: Soma o valor do operando ao valor no acumulador (ACC).
    2.SUB: Subtrai o valor do operando do valor no acumulador (ACC).
    3.LOAD: Carrega um valor na memória para o acumulador (ACC).
    4.STORE: Armazena o valor do acumulador (ACC) em um endereço de memória.
    5.BR: Salta para um endereço especificado (branch).
    6.BRNEG: Salta para um endereço se o valor no acumulador for negativo.
    7.BRPOS: Salta para um endereço se o valor no acumulador for positivo.
    8.BRZERO: Salta para um endereço se o valor no acumulador for zero.
    9.STOP: Termina a execução do programa.
    10.MULT: Multiplica o valor do operando pelo valor no acumulador (ACC).
    11.DIVIDE: Divide o valor no acumulador (ACC) pelo valor do operando.
    12.READ: Lê um valor de entrada e armazena no acumulador (ACC).
    13.WRITE: Escreve o valor no acumulador (ACC) para a saída.
    14.CALL: Chama uma sub-rotina.
    15.RET: Retorna de uma sub-rotina.
    16.COPY: Copia o valor de um endereço de memória para outro.

Implementação em Java:
Vamos implementar essas instruções dentro da classe CPU e adicionar um método para decodificar e executar instruções a partir de uma representação binária simples (como seria no emulador).

CÓDIGO:
public class CPU {
    public Registrador PC;
    public Registrador SP;
    public Registrador ACC;
    public Registrador MOP;
    public Registrador RI;
    public Registrador RE;
    private Memoria memoria;

    public CPU(Memoria memoria) {
        this.PC = new Registrador(16);
        this.SP = new Registrador(16);
        this.ACC = new Registrador(16);
        this.MOP = new Registrador(8);
        this.RI = new Registrador(16);
        this.RE = new Registrador(16);
        this.memoria = memoria;
    }

    // Método para buscar o valor de acordo com o modo de endereçamento
    public int buscarOperando(int modo, int operando) {
        switch (modo) {
            case 0: // Direto
                return this.memoria.ler(operando);
            case 1: // Indireto
                int endereco = this.memoria.ler(operando);
                return this.memoria.ler(endereco);
            case 2: // Imediato
                return operando;
            default:
                throw new IllegalArgumentException("Modo de endereçamento inválido");
        }
    }

    // Implementação das instruções

    public void add(int modo, int operando) {
        int valor = buscarOperando(modo, operando);
        this.ACC.setValor(this.ACC.getValor() + valor);
        System.out.printf("ADD: ACC = %04X\n", this.ACC.getValor());
    }

    public void sub(int modo, int operando) {
        int valor = buscarOperando(modo, operando);
        this.ACC.setValor(this.ACC.getValor() - valor);
        System.out.printf("SUB: ACC = %04X\n", this.ACC.getValor());
    }

    public void load(int modo, int operando) {
        int valor = buscarOperando(modo, operando);
        this.ACC.setValor(valor);
        System.out.printf("LOAD: ACC = %04X\n", this.ACC.getValor());
    }

    public void store(int modo, int operando) {
        if (modo == 0) { // Somente modo direto é permitido para STORE
            this.memoria.escrever(operando, this.ACC.getValor());
            System.out.printf("STORE: Mem[%04X] = %04X\n", operando, this.ACC.getValor());
        } else {
            throw new IllegalArgumentException("Modo de endereçamento inválido para STORE");
        }
    }

    public void br(int operando) {
        this.PC.setValor(operando);
        System.out.printf("BR: PC = %04X\n", this.PC.getValor());
    }

    public void brneg(int operando) {
        if (this.ACC.getValor() < 0) {
            br(operando);
        }
    }

    public void brpos(int operando) {
        if (this.ACC.getValor() > 0) {
            br(operando);
        }
    }

    public void brzero(int operando) {
        if (this.ACC.getValor() == 0) {
            br(operando);
        }
    }

    public void stop() {
        System.out.println("STOP: Execução terminada.");
    }

    // Instruções adicionais

    // MULT - Multiplica o valor do operando pelo ACC
    public void mult(int modo, int operando) {
        int valor = buscarOperando(modo, operando);
        this.ACC.setValor(this.ACC.getValor() * valor);
        System.out.printf("MULT: ACC = %04X\n", this.ACC.getValor());
    }

    // DIVIDE - Divide o ACC pelo valor do operando
    public void divide(int modo, int operando) {
        int valor = buscarOperando(modo, operando);
        if (valor != 0) {
            this.ACC.setValor(this.ACC.getValor() / valor);
            System.out.printf("DIVIDE: ACC = %04X\n", this.ACC.getValor());
        } else {
            System.out.println("DIVIDE: Erro - Divisão por zero.");
        }
    }

    // READ - Lê um valor de entrada e armazena no ACC
    public void read() {
        // Para simplificação, vamos simular a leitura de um valor fixo
        int valor = 0x1234; // Substitua por um método de leitura real se necessário
        this.ACC.setValor(valor);
        System.out.printf("READ: ACC = %04X\n", this.ACC.getValor());
    }

    // WRITE - Escreve o valor do ACC para a saída
    public void write() {
        System.out.printf("WRITE: ACC = %04X\n", this.ACC.getValor());
    }

    // CALL - Chama uma sub-rotina
    public void call(int operando) {
        // Empilha o valor atual do PC
        this.memoria.escrever(this.SP.getValor(), this.PC.getValor());
        this.SP.decrementar();
        // Salta para o endereço da sub-rotina
        this.PC.setValor(operando);
        System.out.printf("CALL: Salto para sub-rotina no endereço %04X\n", operando);
    }

    // RET - Retorna de uma sub-rotina
    public void ret() {
        this.SP.incrementar();
        int enderecoRetorno = this.memoria.ler(this.SP.getValor());
        this.PC.setValor(enderecoRetorno);
        System.out.printf("RET: Retorno para o endereço %04X\n", enderecoRetorno);
    }

    // COPY - Copia o valor de um endereço de memória para outro
    public void copy(int origem, int destino) {
        int valor = this.memoria.ler(origem);
        this.memoria.escrever(destino, valor);
        System.out.printf("COPY: Valor %04X copiado de %04X para %04X\n", valor, origem, destino);
    }

    // Decodificação e execução de uma instrução
    public void executarInstrucao(int instrucao, int modo, int operando) {
        switch (instrucao) {
            case 0x02: // ADD
                add(modo, operando);
                break;
            case 0x03: // SUB
                sub(modo, operando);
                break;
            case 0x04: // LOAD
                load(modo, operando);
                break;
            case 0x05: // STORE
                store(modo, operando);
                break;
            case 0x06: // BR
                br(operando);
                break;
            case 0x07: // BRNEG
                brneg(operando);
                break;
            case 0x08: // BRPOS
                brpos(operando);
                break;
            case 0x09: // BRZERO
                brzero(operando);
                break;
            case 0x0A: // MULT
                mult(modo, operando);
                break;
            case 0x0B: // DIVIDE
                divide(modo, operando);
                break;
            case 0x0C: // READ
                read();
                break;
            case 0x0D: // WRITE
                write();
                break;
            case 0x0E: // CALL
                call(operando);
                break;
            case 0x0F: // RET
                ret();
                break;
            case 0x10: // COPY
                copy(modo, operando);
                break;
            case 0x00: // STOP
                stop();
                break;
            default:
                throw new IllegalArgumentException("Instrução inválida");
        }
    }
}

// Exemplo de uso com as novas instruções
public class Main {
    public static void main(String[] args) {
        // Inicializando a memória com 1 KB
        Memoria memoria = new Memoria(1);

        // Escrevendo valores de teste na memória
        memoria.escrever(100, 0x0002); // Valor para multiplicação
        memoria.escrever(101, 0x0004); // Valor para divisão
        memoria.escrever(200, 0x5678); // Endereço para COPY

        // Inicializando a CPU
        CPU cpu = new CPU(memoria);

        // Teste das instruções
        cpu.load(0, 100);   // LOAD com modo direto
        cpu.mult(0, 100);   // MULT com modo direto
        cpu.divide(0, 101); // DIVIDE com modo direto
        cpu.write();        // WRITE - exibe o valor do ACC
        cpu.copy(100, 200); // COPY

EXPLICAÇÃO DE CÓDIGO:
ADD: Soma o valor do operando ao valor em ACC.
SUB: Subtrai o valor do operando do valor em ACC.
LOAD: Carrega um valor da memória para ACC.
STORE: Armazena o valor de ACC em um endereço de memória.
BR: Salta para o endereço especificado.
BRNEG, BRPOS, BRZERO: Realizam saltos condicionais com base no valor em ACC.
STOP: Termina a execução do programa.
MULT: Multiplica o valor do operando pelo valor no acumulador (ACC).
DIVIDE: Divide o valor no acumulador (ACC) pelo valor do operando, com tratamento para divisão por zero.
READ: Lê um valor de entrada e armazena no acumulador (ACC). Para simplificação, simula a leitura de um valor fixo.
WRITE: Escreve o valor do acumulador (ACC) para a saída.
CALL: Chama uma sub-rotina, salvando o valor atual do PC na pilha e saltando para o endereço da sub-rotina.
RET: Retorna de uma sub-rotina, restaurando o valor do PC da pilha.
COPY: Copia o valor de um endereço de memória para outro.